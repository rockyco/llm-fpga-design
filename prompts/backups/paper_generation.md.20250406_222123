# Academic Paper Generation Prompt

## Context
You are tasked with writing an academic research paper about an FPGA hardware accelerator design that was developed using an AI-assisted design methodology. This paper should follow academic standards and contribute to the literature on hardware acceleration and AI-assisted design.

## Component Information
- **Component Name**: {component_name}
- **LLM Used for Generation**: {generation_model}
- **Target FPGA Platform**: {fpga_part}
- **Domain**: Hardware Acceleration for Digital Signal Processing/Machine Learning/etc.

## Paper Structure Requirements

Create a complete academic paper in markdown format with the following structure:

### 1. Title and Authors
- Create an appropriate academic title for this work
- List authors as the research team (placeholder)
- Include institutional affiliation

### 2. Abstract (200-250 words)
- Summarize the paper's content
- State the problem addressed
- Describe the approach using AI-assisted design
- Highlight key results and contributions
- Mention broader impact

### 3. Introduction
- Context and background of the problem
- Motivation for hardware acceleration
- Challenges in traditional FPGA design
- Introduction to AI-assisted hardware design
- Contribution statement
- Paper organization

### 4. Related Work (2-3 subsections)
- Prior work on hardware acceleration for similar applications
- Previous research on automated HLS design
- AI-assisted hardware design methodologies
- Positioning of current work within literature

### 5. Methodology
- Overall design approach
- AI-assisted design workflow description
- Prompt engineering for hardware generation
- Iteration and refinement process
- Verification methodology

**Workflow Visualization**: Include a Mermaid diagram showing the AI-assisted design workflow. Example:

```mermaid
flowchart TD
    A["Problem Definition"] --> B["Prompt Engineering"]
    B --> C["LLM Code Generation"]
    C --> D["Code Verification"]
    D -->|"Errors"| E["Debugging"]
    E --> C
    D -->|"Success"| F["Implementation"]
    F --> G["Performance Analysis"]
    G -->|"Optimization Needed"| H["Optimization Prompts"]
    H --> C
    G -->|"Acceptable"| I["Final Design"]
```

### 6. Design Architecture
- System-level architecture
- Component interfaces and data flow
- Key algorithmic components
- Design constraints and considerations
- HLS implementation details
- Optimizations applied

**Architecture Visualization**: Include a detailed Mermaid diagram showing the system architecture and data flow. Example:

```mermaid
flowchart LR
    A["External Input"] --> B["Input Interface"]
    B --> C["Processing Module"]
    
    subgraph "Core Accelerator"
    C --> D["Algorithm Stage 1"]
    D --> E["Algorithm Stage 2"]
    E --> F["Algorithm Stage 3"]
    end
    
    F --> G["Output Interface"]
    G --> H["External Output"]
    
    I["Control Logic"] --> C
    I --> D
    I --> E
    I --> F
```

### 7. Implementation
- HLS directives and pragmas
- Resource allocation strategies
- Pipeline and parallelism exploitations
- Memory architecture and data movement
- Critical path analysis

**Implementation Visualization**: Include a Mermaid diagram showing key optimization strategies or pipeline structure. Example:

```mermaid
gantt
    title Pipeline Structure
    dateFormat s
    axisFormat %S
    
    section Without Pipelining
    Stage 1      :a1, 0, 3s
    Stage 2      :a2, after a1, 2s
    Stage 3      :a3, after a2, 2s
    
    section With Pipelining
    Stage 1 (Iter 1)  :b1, 0, 3s
    Stage 2 (Iter 1)  :b2, after b1, 2s
    Stage 1 (Iter 2)  :b3, after b1, 3s
    Stage 3 (Iter 1)  :b4, after b2, 2s
    Stage 2 (Iter 2)  :b5, after b3, 2s
```

### 8. Experimental Results
- Experimental setup
- Performance metrics:
  - Resource utilization
  - Timing and frequency
  - Latency and throughput
  - Power consumption (if available)
- Comparative analysis with:
  - Manual implementations
  - Other automated approaches
  - Software-only solutions
- Discussion of results

**Results Visualization**: Present results in clear tables and comparison charts:

```
| Implementation | LUTs | FFs | DSPs | BRAMs | Clock Freq (MHz) | Latency (cycles) |
|----------------|------|-----|------|-------|------------------|------------------|
| Our Work       | X    | Y   | Z    | W     | F                | L                |
| Baseline 1     | X1   | Y1  | Z1   | W1    | F1               | L1               |
| Baseline 2     | X2   | Y2  | Z2   | W2    | F2               | L2               |
```

Consider including Mermaid charts for comparative analysis:

```mermaid
pie title Resource Distribution
    "LUTs" : X
    "FFs" : Y
    "DSPs" : Z
    "BRAMs" : W
```

### 9. Analysis of AI-Assisted Design Process
- Analysis of LLM strengths/weaknesses in hardware design
- Error patterns and resolution strategies
- Human-AI collaboration insights
- Design quality assessment
- Development efficiency metrics

**Process Visualization**: Show the iteration process and error resolution:

```mermaid
stateDiagram-v2
    [*] --> Prompt
    Prompt --> Generation
    Generation --> Verification
    Verification --> Success
    Verification --> Errors
    Errors --> Analysis
    Analysis --> Refinement
    Refinement --> Prompt
    Success --> [*]
```

### 10. Discussion
- Interpretation of results
- Limitations of the approach
- Generalizability of the methodology
- Trade-offs identified
- Lessons learned

### 11. Future Work
- Potential improvements
- Broader applications
- Research directions
- Scaling to more complex designs

### 12. Conclusion
- Summary of contributions
- Key findings
- Broader impact
- Closing thoughts

### 13. References
- Include relevant references to:
  - Hardware acceleration literature
  - High-Level Synthesis research
  - AI in design automation
  - Relevant applications
  - Methodological papers

## Source Information
Use the following source information to inform your paper:

### Source Code Architecture
```cpp
// Header file ({component_name}.hpp)
{header_code}
```

```cpp
// Implementation file ({component_name}.cpp)
{implementation_code}
```

### Performance Metrics
{performance_metrics}

### Design Process
- AI Generation Model: {generation_model}
- Workflow Steps: {workflow_steps}
- Successful Steps: {successful_steps}
- Error Steps: {error_steps}

### Implementation Challenges
{errors_encountered}

### Debugging Methods
{debugging_methods}

## Diagram Examples
The following are examples of different types of Mermaid diagrams you can use:

{diagram_examples}

## Chart Examples
The following are examples of different types of tables/charts for performance data:

{chart_examples}

## Academic Style Guidelines
- Use formal academic language
- Present objective analysis of results
- Support claims with data from implementation
- Discuss limitations honestly
- Position work in relation to existing literature
- Use the third person (avoid "I", "we", "you")
- Maintain scientific rigor throughout
- Use passive voice where appropriate
- Include a balanced mix of technical details and higher-level discussion
- Present results visually through diagrams, charts and tables
- Use Mermaid diagrams for architecture, methodology, and algorithmic visualizations
- Present performance results in tables with comparative analysis

Your paper should contribute to the academic discourse on AI-assisted hardware design while presenting concrete technical achievements and insights.

## BEST PRACTICES

